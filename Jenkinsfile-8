pipeline {
    //Usando el Tag y Branch del ultimo commit de GitHub
    //Con esta funcion se busca que el Pipeline construya la imagen de docker usando ambos parametros
    //Teniendo una imagen con formato image:version-branch
    //Formato imagen ambiente dev: image:gittag-dev
    //Formato imagen ambiente prod: image:gittag-prod
    parameters {
        string(name: 'PLAN',defaultValue:'Plan-SociusRGLABRGModeloDevOpsDockerDev',description:'Plan del servicio')
        string(name: 'RES_GRP',defaultValue:'SOCIUSRGLAB-RG-MODELODEVOPS-DEV',description:'Grupo de recursos')
    }

    environment {
        TAG_NAME = ''
        APP_NAME = ''
    }
    
    agent {
        docker {
          image 'aggasth/ubuntu-azcli'
          args '--privileged --network=host'
        }
    }
    
    stages {
        stage(){
            steps {
                sh 'env'
            }
        }
        stage('Obtain GitTag & GitBranch'){
            steps {
                script {
                    def tagName = env.CHANGE_ID
                    if (tagName =~ /dev-.*/) {
                        TAG_NAME = tagName.replaceAll('refs/tags/', '')
                        APP_NAME = 'sociuswebapptest010'
                        echo "** Desplegando en: $TAG_NAME (Dev)"
                    } else if (tagName =~ /prod-.*/) {
                        TAG_NAME = tagName.replaceAll('refs/tags/', '')
                        echo "** Desplegando en: $TAG_NAME (Prod)"
                        APP_NAME = 'sociuswebapptest011'
                    } else {
                        error('Etiqueta no válida. Deteniendo la ejecución de la pipeline.')
                    }
                }
            }
        }

        stage('Build Docker'){
            environment{
                dockerTool = tool 'docker'
            }
            steps{
                sh "${dockerTool}/bin/docker build -t aggasth/mongo-store:$TAG_NAME ."
                echo ' ** Imagen de Docker creada correctamente'
            }
        }

        stage('Push Docker Image to ACR'){
            environment {
                dockerTool = tool 'docker'
                dockerHub = credentials('BrankoDockerHub')
                azureUs = credentials('BrankoAzureLogin')
            }
            steps{
                sh '${dockerTool}/bin/docker login -u $azureUs_USR -p $azureUs_PSW bosorio.azurecr.io'
                sh "${dockerTool}/bin/docker tag aggasth/mongo-store:$TAG_NAME bosorio.azurecr.io/mongo-store:$TAG_NAME"
                sh "${dockerTool}/bin/docker push bosorio.azurecr.io/mongo-store:$TAG_NAME"
                sh "${dockerTool}/bin/docker rmi -f aggasth/mongo-store:$TAG_NAME"
                sh "${dockerTool}/bin/docker rmi -f bosorio.azurecr.io/mongo-store:$TAG_NAME"
                sh '${dockerTool}/bin/docker logout'
                echo ' ** Imagen subida a ACR correctamente.'
            }
        }

        stage('Azure Login & ContainerImage Set ACR') {
            environment {
                dockerTool = tool 'docker'
                dockerHub = credentials('BrankoDockerHub')
                azureUs = credentials('BrankoAzureLogin')
            }
            steps {
                script {
                    env.AZURE_CONFIG_DIR = "${WORKSPACE}/azure-config"
                    withCredentials(bindings: [azureServicePrincipal('devServicePrincipal')]) {
                        sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
                        sh "az webapp config container set --name $APP_NAME --resource-group $RES_GRP --docker-custom-image-name bosorio.azurecr.io/mongo-store:$TAG_NAME --docker-registry-server-url https://bosorio.azurecr.io --docker-registry-server-user $azureUs_USR --docker-registry-server-password $azureUs_PSW"
                        echo ' ** Imagen de Contenedor modificada correctamente'
                    }
                }
            }
        }
        
    }
}
