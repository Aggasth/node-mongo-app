pipeline {
    //Usando el Tag del ultimo commit de GitHub
    parameters {
        string(name:'PLAN',defaultValue:'Plan-SociusRGLABRGModeloDevOpsDockerDev',description:'Plan del servicio')
        string(name:'APP_NAME',defaultValue:'sociuswebapptest010',description:'Nombre de la webapp')
        string(name:'RES_GRP',defaultValue:'SOCIUSRGLAB-RG-MODELODEVOPS-DEV',description:'Grupo de recursos')
    }
    
    agent {
        dockerfile { args '--privileged --network=host'}
    }
    
    stages {
        stage('Install') {
            steps {
                sh 'npm install'
            }
        }

        stage('Obtain GitTag'){
            steps {
                script{
                    def gitTag = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
                    echo " ** Git Tag Version: ${gitTag}"
                }
                
            }
            
        }

        stage('Build Docker'){
            environment{
                dockerTool = tool 'docker'
                gitTag = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
            }
            steps{
                sh "${dockerTool}/bin/docker build -t aggasth/mongo-store:${gitTag} ."
            }
        }

        stage('Push Docker Image to ACR'){
            environment {
                dockerTool = tool 'docker'
                dockerHub = credentials('BrankoDockerHub')
                azureUs = credentials('BrankoAzureLogin')
                gitTag = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
            }
            steps{
                sh '${dockerTool}/bin/docker login -u $azureUs_USR -p $azureUs_PSW bosorio.azurecr.io'
                sh "${dockerTool}/bin/docker tag aggasth/mongo-store:${gitTag} bosorio.azurecr.io/mongo-store:${gitTag}"
                sh "${dockerTool}/bin/docker push bosorio.azurecr.io/mongo-store:${gitTag}"
                sh "${dockerTool}/bin/docker rmi -f aggasth/mongo-store:${gitTag}"
                sh "${dockerTool}/bin/docker rmi -f bosorio.azurecr.io/mongo-store:${gitTag}"
                sh '${dockerTool}/bin/docker logout'
            }
        }

        stage('Azure Login & ContainerImage Set ACR') {
            environment {
                dockerTool = tool 'docker'
                dockerHub = credentials('BrankoDockerHub')
                azureUs = credentials('BrankoAzureLogin')
                gitTag = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
            }
            steps {
                script {
                    withCredentials(bindings: [azureServicePrincipal('devServicePrincipal')]) {
                        sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
                        sh "az webapp config container set --name $APP_NAME --resource-group $RES_GRP --docker-custom-image-name bosorio.azurecr.io/mongo-store:${gitTag} --docker-registry-server-url https://bosorio.azurecr.io --docker-registry-server-user $azureUs_USR --docker-registry-server-password $azureUs_PSW"
                        echo '- Imagen de Contenedor modificada correctamente -'
                    }
                }
            }
        }
        
    }
}
